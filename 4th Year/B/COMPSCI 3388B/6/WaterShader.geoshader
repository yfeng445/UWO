#version 400

layout (triangles) in;
layout (triangle_strip, max_vertices=3) out;

// Input vertex data, aggregated into triangles
in VertexData {
	vec3 position;
	vec3 normal;
	vec2 texcoord;
} vertexData[];


// Output data per vertex, passed to primitive assembly and rasterization
out VertexData {
	vec3 position;
	vec3 normal;
	vec2 texcoord;
} vs_out;

// Uniform values that stay constant for the whole mesh.
uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;
uniform sampler2D displacementTexture;
uniform float time;

vec3 GetNormal(vec4 a, vec4 b, vec4 c)
{
   vec3 x = b.xyz - a.xyz;
   vec3 y = c.xyz - b.xyz;
   return normalize(cross(x, y));
}


vec3 Gerstner(vec3 worldpos, float w, float A, float phi, float Q, vec2 D, int N) {
vec3 result = vec3(0.0);
	for(int i = 0; i < N; ++i) {
		float k = 2.0 * 3.14159265359 * float(i) / w;
		float c = cos(k * worldpos.x + phi);
		float s = sin(k * worldpos.x + phi);
		float h = A * exp(-k * k * Q * Q) * (c + s);
		result += vec3(h * D.x, h * D.y, 0.0);
	}
	return result;
}


void main() {

	for(int i = 0; i < gl_in.length(); ++i) {
		gl_Position = gl_in[i].gl_Position;
		EmitVertex();
	}

	vec3 mynorm = GetNormal(gl_in[0].gl_Position, gl_in[1].gl_Position, gl_in[2].gl_Position);


	for(int i = 0; i < gl_in.length(); ++i) {
		vec4 pos = gl_in[i].gl_Position;
		vec3 normal = mynorm;
		vec3 worldpos = pos.xyz;
		vec3 displacement = Gerstner(worldpos, 100.0, 0.1, time, 0.1, vec2(1.0, 0.0), 10);
		pos.xyz += displacement;
		gl_Position = pos;

		EmitVertex();
	}
	EndPrimitive();

}

